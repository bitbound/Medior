// <auto-generated />
using System;
using Medior.Web.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Medior.Web.Server.Migrations;

[DbContext(typeof(AppDb))]
[Migration("20220816234243_File and clip owners")]
partial class Fileandclipowners
{
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

        modelBuilder.Entity("Medior.Shared.Entities.ClipboardSave", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<string>("AccessTokenEdit")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("AccessTokenView")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<byte[]>("Content")
                    .IsRequired()
                    .HasColumnType("BLOB");

                b.Property<long>("ContentSize")
                    .HasColumnType("INTEGER");

                b.Property<int>("ContentType")
                    .HasColumnType("INTEGER");

                b.Property<string>("CreatedAt")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("FriendlyName")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("LastAccessed")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<Guid?>("UserAccountId")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("UserAccountId");

                b.ToTable("ClipboardSaves");
            });

        modelBuilder.Entity("Medior.Shared.Entities.UploadedFile", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<string>("AccessTokenEdit")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("AccessTokenView")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("ContentDisposition")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("FileName")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<long>("FileSize")
                    .HasColumnType("INTEGER");

                b.Property<string>("LastAccessed")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("UploadedAt")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<Guid?>("UserAccountId")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("UserAccountId");

                b.ToTable("UploadedFiles");
            });

        modelBuilder.Entity("Medior.Shared.Entities.UserAccount", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<string>("PublicKey")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("Username");

                b.ToTable("UserAccounts");
            });

        modelBuilder.Entity("Medior.Shared.Entities.ClipboardSave", b =>
            {
                b.HasOne("Medior.Shared.Entities.UserAccount", "UserAccount")
                    .WithMany()
                    .HasForeignKey("UserAccountId");

                b.Navigation("UserAccount");
            });

        modelBuilder.Entity("Medior.Shared.Entities.UploadedFile", b =>
            {
                b.HasOne("Medior.Shared.Entities.UserAccount", "UserAccount")
                    .WithMany()
                    .HasForeignKey("UserAccountId");

                b.Navigation("UserAccount");
            });
#pragma warning restore 612, 618
    }
}
