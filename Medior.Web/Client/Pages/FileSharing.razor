@page "/file-sharing/{fileId?}"
@using Medior.Shared.Interfaces
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject ILogger<FileSharing> Logger
@inject IApiService ApiService
@inject IToastService ToastService
@inject ILoaderService LoaderService
@inject IServerUriProvider ServerUriProvider
@inject NavigationManager NavManager
@inject IJsInterop JsInterop

<h3>File Sharing</h3>

@if (FileId is null)
{
    <div class="row mt-5 mb-5">
        <FileUploadButton Multiple="false" OnFilesChanged="HandleFilesChanged" ClassNames="btn btn-lg btn-primary">
            Upload
        </FileUploadButton>
    </div>
}
else
{
    <div class="row mt-5">
        <div class="col-12">
            @if (_viewType == ViewType.NotFound)
            {
                <h5>File not found.</h5>
            }
            else
            {
                <div class="mb-3">
                    <a class="btn btn-primary"
                           target="_blank"
                           href="@(ServerUriProvider.ServerUri)/api/file/@(FileId)?accessToken=@(AccessToken)">
                        Download
                    </a>
                    <FileUploadButton Multiple="false" OnFilesChanged="HandleFilesChanged" ClassNames="btn btn-secondary ms-3">
                        Upload
                    </FileUploadButton>
                </div>
                <div>
                    <label class="form-label">
                        <strong>Sharing URL:</strong>
                    </label>
                </div>
                <div class="mb-4 input-group">
                    <input type="text" class="form-control" readonly value="@(NavManager.Uri)" />
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick="CopyUrl">Copy</button>
                    </div>
                </div>
                <div>
                    <label class="form-label">
                        <strong>File Name:</strong>
                        <br />
                        @_downloadFileName
                    </label>
                </div>
            }

            @if (_viewType == ViewType.PreviewUnsupported)
            {
                <h4>
                    Preview unavailable for this file type.
                </h4>
            }
            else if (_viewType == ViewType.Image)
            {
                <img class="img-fluid border border-light border-2" src="/api/file/@(FileId)?accessToken=@(AccessToken)" />
            }
            else if (_viewType == ViewType.Video)
            {
                <video class="img-fluid border border-light border-2" src="/api/file/@(FileId)?accessToken=@(AccessToken)" controls autoplay />
            }
        </div>
    </div>
}

@code {
    private string? _downloadFileName;
    private string? _inputFileId;
    private ViewType _viewType;

    [Parameter]
    public string? FileId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? AccessToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await TryLoadFile();

        await base.OnInitializedAsync();
    }

    private async Task CopyUrl()
    {
        await JsInterop.SetClipboard(NavManager.Uri);
        ToastService.Show("Copied to clipboard", ToastType.Success);
    }

    private async Task HandleFilesChanged(InputFileChangeEventArgs args)
    {
        try
        {
            using var _ = LoaderService.Show("Uploading file");

            using var stream = args.File.OpenReadStream(100_000_000);
            var result = await ApiService.UploadFile(stream, args.File.Name);
            if (!result.IsSuccess)
            {
                ToastService.Show("Upload failed", ToastType.Error);
                return;
            }

            FileId = $"{result.Value?.Id}";
            AccessToken = $"{result.Value?.AccessTokenView}";

            ToastService.Show("Upload succeeded", ToastType.Success);
            NavigateToFileId($"{result.Value?.Id}", $"{result.Value?.AccessTokenView}");
            await TryLoadFile();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while retrieving file details.");
        }
    }

    private void NavigateToFileId(string fileId, string accessToken)
    {
        NavManager.NavigateTo($"/file-sharing/{fileId}?accessToken={accessToken}");
    }

    private async Task TryLoadFile()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(FileId))
            {
                return;
            }

            using var response = await ApiService.GetFileHeaders(FileId, AccessToken);

            if (!response.IsSuccessStatusCode)
            {
                Logger.LogWarning("Received status code {code}.", response.StatusCode);
                _viewType = ViewType.NotFound;
                return;
            }

            _downloadFileName = response.Content.Headers.ContentDisposition?.FileName?.Trim('"') ?? string.Empty;
            var contentType = response.Content.Headers.ContentType?.MediaType ?? string.Empty;

            Logger.LogInformation("Found content type {type}.", contentType);

            if (contentType.StartsWith("image", StringComparison.OrdinalIgnoreCase))
            {
                _viewType = ViewType.Image;
                return;
            }

            if (contentType.StartsWith("video", StringComparison.OrdinalIgnoreCase))
            {
                _viewType = ViewType.Video;
                return;
            }

            _viewType = ViewType.PreviewUnsupported;
        }
        catch (Exception ex)
        {
            ToastService.Show("An error occurred", ToastType.Error);
            Logger.LogError(ex, "Error while retrieving file details.");
        }
    }

    private enum ViewType
    {
        Unknown,
        NotFound,
        PreviewUnsupported,
        Image,
        Video
    }
}
